#!/usr/bin/env bash

set -e

. $DAISY_PATH/.env
#ASCII ART REF: https://emojicombos.com/daisy
echo '''
===========DAISY TOOL===========
             ⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣤⣶⢾⣻⡷⣷⣦⡐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡀⣠⣿⣟⣾⣟⣯⢿⣳⣯⣇⣠⣤⣴⣶⣶⡶⣦⣄⡀⢀⠀⠀
⠀⠀⠀⠀⠀⠁⣾⢷⣏⣷⢿⣹⡿⣏⣷⢿⣷⣏⡿⣾⢷⣿⣏⡿⣿⡀⠁⠀
⠀⠀⢀⣠⣶⣶⢿⣻⢯⣟⡿⠙⠉⡉⠉⠙⠺⣯⣿⣻⢯⣷⣻⣽⢯⣷⠈⠀
⡄⢠⣿⣟⡷⣯⡿⣯⣿⡛⠁⠄⠡⢀⠡⠈⠄⡙⣷⣿⣻⣽⣻⢾⡿⡽⠀⠂
⡀⣿⣳⣯⢿⣻⣽⢷⣻⣇⠈⠄⡁⠂⠄⡁⠂⠄⣿⣾⣽⣳⡿⣯⠟⢀⠂⠀
⢂⠹⣻⢾⣟⣯⣟⡿⣽⣻⣆⠂⠄⡁⠂⠄⡁⣢⣿⢷⣯⢿⣽⢷⣄⠁⠀⠀
⠀⠂⠈⠻⢟⣾⣽⡟⢯⣿⡽⣿⣷⣶⣥⣶⣾⢿⣯⢿⣾⣻⡽⣟⣾⡆⠁⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣾⣯⢿⣳⣟⣾⣽⣳⣿⣻⢾⣟⡷⣿⡽⣟⣷⠃⡄⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣿⣾⡿⣏⣿⣾⣹⣷⠿⠹⣿⣾⢿⣷⣿⢿⠇⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠆⠹⣷⣻⣟⡾⣷⢯⡟⠀⠒⠀⠉⠉⠈⠉⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠷⣟⡿⠽⠋⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'''
SUPPORTED_DISTRO=( foxy galactic humble iron  )

NO_CACHE=
INPUT_ROS_DISTRO=
SKIP_IMPORT=false
DEL_BUILD_DIR=false

usage() {
  echo "Usage: daisy-build <arguments>"
  echo "  --ros-distro DISTRO ROS distro to install"
  echo "  --no-cache          Run docker compose build with --no-cache flag"
  echo "  --skip-import       Skip installing repositories found in install.repos"
  echo "  --del-build-dir     Delete colcon build directories (build install log)"
  exit 1
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
    --rosdistro)
        shift
        if [[ $# -gt 0 ]]; then
            INPUT_ROS_DISTRO="$1"
            if [[ ! " ${SUPPORTED_DISTRO[*]} " =~ " $INPUT_ROS_DISTRO " ]]; then
                echo "Unsupported $INPUT_ROS_DISTRO distro. Exiting now!"
                exit 1
            fi

            if [[ ! -z $INPUT_ROS_DISTRO && ! -z $USE_ROS_DISTRO && $USE_ROS_DISTRO != $INPUT_ROS_DISTRO && -f "$ROS2_WS_MOUNT/install.repos"  ]]; then
                echo "A rosinstall file has been detected in your workspace using ROS2 $USE_ROS_DISTRO."
                echo "Building your workspace using ROS2 $INPUT_ROS_DISTRO might cause compatibility issues."
                echo "Do you want to continue?"
                echo -n "Yes [y] or No [n]: " 
                read reply
                if [[ "$reply" == "n" || "$reply" == "N" ]]; then
                    echo "Exiting now!"
                    exit 1
                fi
            fi

            USE_ROS_DISTRO=$INPUT_ROS_DISTRO
        else
            echo "Error: Option --rosdistro requires an argument"
            usage
            exit 1
        fi
        ;;

    --skip-import)
        SKIP_IMPORT=true
        ;;

    --no-cache)
        NO_CACHE="--no-cache"
        ;;

    --del-build-dir)
        DEL_BUILD_DIR=true
        ;;

    -h | --help)
        usage
        ;;

    -*)
        echo "Error: Unknown option: $1"
        exit 1
        ;;
    esac
    shift
done

if [[ -z $INPUT_ROS_DISTRO && -z $USE_ROS_DISTRO ]]; then
    echo "USE_ROS_DISTRO variable is unset in .env file and no ROS2 distro provided. Exiting now!"
    echo "usage: daisy-build --rosdistro [foxy, galactic, humble, iron]"
    exit 1
fi

echo "Building ROS2 ${USE_ROS_DISTRO^} Docker image for $ROS2_WS_MOUNT."

if [[ -f "$ROS2_WS_MOUNT/install.repos" && "${SKIP_IMPORT^^}" == "FALSE" ]]; then
    if [ ! -x "$(command -v vcs)" ]; then
        echo "Installing VCS Tool for exporting dependencies."
        curl -s https://packagecloud.io/install/repositories/dirk-thomas/vcstool/script.deb.sh | sudo bash
        sudo apt update -y
        sudo apt install -y python3-vcstool
    fi
    echo "Found a rosinstall file in your workspace." 
    echo "Downloading the following local repositories now:"
    echo ""
    cat $ROS2_WS_MOUNT/install.repos
    echo ""
    echo "in $ROS2_WS_MOUNT/src"
    echo ""
    mkdir -p $ROS2_WS_MOUNT/src
    vcs import $ROS2_WS_MOUNT/src --skip-existing --input $ROS2_WS_MOUNT/install.repos --recursive --workers 1
fi

if [[ -z $(ls -A "$ROS2_WS_MOUNT/src") ]]; then
   echo "$ROS2_WS_MOUNT/src is empty. Download all the repositories before running daisy-build."
   exit 1
fi

if [ ! -z "$INPUT_ROS_DISTRO"  ]; then
    echo "Updating .env to $INPUT_ROS_DISTRO"
    sed -i "/USE_ROS_DISTRO/ s/.*/USE_ROS_DISTRO=$INPUT_ROS_DISTRO/" $DAISY_PATH/.env
    . $DAISY_PATH/.env
fi

PRELOAD_DIRECTORY="$ROS2_WS_MOUNT/.preload"
rm -rf $PRELOAD_DIRECTORY
mkdir -p $PRELOAD_DIRECTORY

find "$ROS2_WS_MOUNT/src" -name "package.xml" -type f -print0 |
while IFS= read -r -d '' PACKAGE_XML; do
    # Extract the directory path of each package.xml
    PACKAGE_DIRECTORY="$(dirname "$PACKAGE_XML")"

    # Check if COLCON_IGNORE file exists in the same directory
    IGNORE_FILE="$PACKAGE_DIRECTORY/COLCON_IGNORE"
    if [ -e "$IGNORE_FILE" ]; then
        echo "Skipping $PACKAGE_XML due to COLCON_IGNORE."
        continue
    fi

    # Create a subdirectory in the preload directory
    SUBDIRECTORY="$PRELOAD_DIRECTORY/$(basename "$PACKAGE_DIRECTORY")"
    mkdir -p "$SUBDIRECTORY"
    
    # Copy the package.xml to the subdirectory
    cp "$PACKAGE_XML" "$SUBDIRECTORY"
done

cd $DAISY_PATH
. setup.bash
export PRELOAD_PATH=.preload
docker compose build $NO_CACHE
rm -rf $PRELOAD_DIRECTORY

if [ ! -f $ROS2_WS_MOUNT/.last_build_errors ]; then
    touch $ROS2_WS_MOUNT/.last_build_errors
fi

if [[ "${DEL_BUILD_DIR^^}" == "TRUE" ]]; then
    sudo rm -rf $ROS2_WS_MOUNT/build
    sudo rm -rf $ROS2_WS_MOUNT/install
    sudo rm -rf $ROS2_WS_MOUNT/log
    echo "Deleted build install and log"
fi

echo ""
echo "Build done!"
